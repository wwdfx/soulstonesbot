import logging
import sqlite3
import random
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
from datetime import datetime, timedelta
import asyncio

# Set up basic logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Connect to SQLite Database
conn = sqlite3.connect('user_balances.db')
c = conn.cursor()

# Create tables if they do not exist
c.execute('''
    CREATE TABLE IF NOT EXISTS balances (
        user_id INTEGER PRIMARY KEY,
        balance INTEGER NOT NULL DEFAULT 0
    )
''')

c.execute('''
    CREATE TABLE IF NOT EXISTS last_reading (
        user_id INTEGER PRIMARY KEY,
        last_request TIMESTAMP
    )
''')
conn.commit()

# Function to retrieve balance
def get_balance(user_id):
    c.execute('SELECT balance FROM balances WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    return result[0] if result else 0

# Function to update balance
def update_balance(user_id, amount):
    current_balance = get_balance(user_id)
    new_balance = current_balance + amount
    c.execute('REPLACE INTO balances (user_id, balance) VALUES (?, ?)', (user_id, new_balance))
    conn.commit()
    return new_balance

# Function to reduce balance
def reduce_balance(user_id, amount):
    current_balance = get_balance(user_id)
    if current_balance >= amount:
        new_balance = current_balance - amount
        c.execute('REPLACE INTO balances (user_id, balance) VALUES (?, ?)', (user_id, new_balance))
        conn.commit()
        return new_balance
    else:
        return None  # Not enough balance

# Function to check and update last reading request time
def can_request_reading(user_id):
    c.execute('SELECT last_request FROM last_reading WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    if result:
        last_request_time = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S')
        if datetime.now() - last_request_time < timedelta(days=1):
            return False
    c.execute('REPLACE INTO last_reading (user_id, last_request) VALUES (?, ?)', (user_id, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
    conn.commit()
    return True

# Define a function to handle messages
async def message_handler(update: Update, context):
    message_text = update.message.text
    target_group_id = -1002142915618  # Adjust this ID to your target group

    logger.info(f"Received message in group {update.message.chat_id}: {message_text[:50]}")
    if len(message_text) >= 500 and update.message.chat_id == target_group_id:
        user_id = update.message.from_user.id
        user_mention = update.message.from_user.username or update.message.from_user.first_name
        mention_text = f"@{user_mention}" if update.message.from_user.username else user_mention

        new_balance = update_balance(user_id, 5)
        await update.message.reply_text(f"üíé {mention_text}, –≤–∞—à –ø–æ—Å—Ç –∑–∞—á—Ç—ë–Ω. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +5 –∫ –∫–∞–º–Ω—è–º –¥—É—à. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}üíé.")

# Define a function to handle the /balance command
async def balance_command(update: Update, context):
    user_id = update.message.from_user.id
    user_mention = update.message.from_user.username or update.message.from_user.first_name
    mention_text = f"@{user_mention}" if update.message.from_user.username else user_mention
    balance = get_balance(user_id)
    await update.message.reply_text(f"üíé {mention_text}, –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}üíé.")

# Readings list
readings = [
    "–°–µ–≥–æ–¥–Ω—è –∞–Ω–≥–µ–ª—å—Å–∫–∞—è —Å–∏–ª–∞ –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±—è.",
    "–ù–æ–≤–∞—è —Ä—É–Ω–∞ –æ—Ç–∫—Ä–æ–µ—Ç —Ç–µ–±–µ —Å–≤–æ—é –∏—Å—Ç–∏–Ω–Ω—É—é —Ü–µ–ª—å.",
    "–û—Å—Ç–µ—Ä–µ–≥–∞–π—Å—è –¥–µ–º–æ–Ω–æ–≤, –ø—Ä—è—á—É—â–∏—Ö—Å—è –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö.",
    "–°–æ—é–∑–Ω–∏–∫ –∏–∑ –ù–∏–∂–Ω–µ–≥–æ –º–∏—Ä–∞ –æ–∫–∞–∂–µ—Ç –≤–∞–∂–Ω—É—é –ø–æ–º–æ—â—å.",
    "–¢–≤–æ–π —Å–µ—Ä—Ñ–∏–º—Å–∫–∏–π –∫–ª–∏–Ω–æ–∫ –±—É–¥–µ—Ç —Å–µ–≥–æ–¥–Ω—è —Å–∏—è—Ç—å —è—Ä—á–µ –≤ —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö.",
    "–ò–Ω—Å—Ç–∏—Ç—É—Ç —Ö—Ä–∞–Ω–∏—Ç —Å–µ–∫—Ä–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ–π –ø—É—Ç—å.",
    "–°–≤—è–∑—å –ø–∞—Ä–∞–±–∞—Ç–∞–π —É–∫—Ä–µ–ø–∏—Ç —Ç–≤–æ—é —Ä–µ—à–∏–º–æ—Å—Ç—å.",
    "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ò–¥—Ä–∏—Å–∞ –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.",
    "–ú—É–¥—Ä–æ—Å—Ç—å –ë–µ–∑–º–æ–ª–≤–Ω—ã—Ö –±—Ä–∞—Ç—å–µ–≤ –ø–æ–º–æ–∂–µ—Ç –≤ —Ç–≤–æ–µ–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏.",
    "–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç —Ç–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –°—É–º–µ—Ä–µ—á–Ω–æ–≥–æ –æ—Ö–æ—Ç–Ω–∏–∫–∞.",
    "–†–µ—à–µ–Ω–∏–µ –ö–æ–Ω–∫–ª–∞–≤–∞ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ–µ –±—É–¥—É—â–µ–µ.",
    "–ú–∞–≥ –æ—Ç–∫—Ä–æ–µ—Ç —Ç–µ–±–µ –ø–æ—Ä—Ç–∞–ª –≤ –∑–Ω–∞—á–∏–º–æ–µ –º–µ—Å—Ç–æ.",
    "–¢–≤–æ–π —Å—Ç–µ–ª–µ —Å–æ–∑–¥–∞—Å—Ç —Ä—É–Ω—É –æ–≥—Ä–æ–º–Ω–æ–π —Å–∏–ª—ã.",
    "–î—Ä–µ–≤–Ω—è—è –∫–Ω–∏–≥–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –æ—Ç–∫—Ä–æ–µ—Ç –∑–∞–±—ã—Ç–æ–µ –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–æ–∫–ª—è—Ç–∏–µ.",
    "–ó–∞–≥–∞–¥–∫–∞ —Ñ–µ–π—Ä–∏ –ø—Ä–∏–≤–µ–¥–µ—Ç —Ç–µ–±—è –∫ —Å–∫—Ä—ã—Ç–æ–π –∏—Å—Ç–∏–Ω–µ.",
    "–¢–≤–æ—è —Å–≤—è–∑—å —Å –∞–Ω–≥–µ–ª—å—Å–∫–∏–º –º–∏—Ä–æ–º —Å—Ç–∞–Ω–µ—Ç —Å–∏–ª—å–Ω–µ–µ.",
    "–õ–æ—è–ª—å–Ω–æ—Å—Ç—å –≤–∞–º–ø–∏—Ä–∞ –æ–∫–∞–∂–µ—Ç—Å—è –Ω–µ–æ—Ü–µ–Ω–∏–º–æ–π.",
    "–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –∫–æ–ª–¥—É–Ω–∞ –ø—Ä–∏–Ω–µ—Å–µ—Ç —è—Å–Ω–æ—Å—Ç—å –≤ –∑–∞–ø—É—Ç–∞–Ω–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é.",
    "–î–µ–º–æ–Ω–∏—á–µ—Å–∫–∏–µ –º–∏—Ä—ã –Ω–µ–æ–±—ã—á–∞–π–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã; –±—É–¥—å –Ω–∞ —á–µ–∫—É.",
    "–°–æ–Ω –¥–∞—Å—Ç —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ –±—É–¥—É—â–µ–º.",
    "–°–∫—Ä—ã—Ç–∞—è —Ä—É–Ω–∞ –æ—Ç–∫—Ä–æ–µ—Ç –Ω–æ–≤—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.",
    "–ò—â–∏ –æ—Ç–≤–µ—Ç—ã –≤ –ö–æ–¥–µ–∫—Å–µ. –û–Ω –∑–Ω–∞–µ—Ç —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å",
    "–°–º–µ—Ä—Ç–Ω—ã–π —É–¥–∏–≤–∏—Ç —Ç–µ–±—è —Å–≤–æ–µ–π —Ö—Ä–∞–±—Ä–æ—Å—Ç—å—é.",
    "–ü–æ—Ç–µ—Ä—è–Ω–Ω–∞—è —Å–µ–º–µ–π–Ω–∞—è —Ä–µ–ª–∏–∫–≤–∏—è –æ–±—Ä–µ—Ç–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
    "–¢–µ–Ω–µ–≤–æ–π —Ä—ã–Ω–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥–º–µ—Ç, –≤–∞–∂–Ω—ã–π –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.",
    "–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –º—è—Ç–µ–∂–Ω—ã–º –°—É–º–µ—Ä–µ—á–Ω—ã–º –æ—Ö–æ—Ç–Ω–∏–∫–æ–º –Ω–µ–∏–∑–±–µ–∂–Ω–æ.",
    "–¶–µ—Ä–µ–º–æ–Ω–∏—è —Ä—É–Ω –ø—Ä–∏–±–ª–∏–∑–∏—Ç —Ç–µ–±—è –∫ —Ç–≤–æ–µ–º—É –∏—Å—Ç–∏–Ω–Ω–æ–º—É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—É.",
    "–ü–æ—Å–µ—â–µ–Ω–∏–µ –ó–∞–ª–∞ –°–æ–≥–ª–∞—Å–∏—è –æ—á–µ–Ω—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.",
    "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å–æ—é–∑ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å –æ–±–∏—Ç–∞—Ç–µ–ª–µ–º –ù–∏–∂–Ω–µ–≥–æ –º–∏—Ä–∞.",
    "–¢–≤–æ–π —Å–µ—Ä—Ñ–∏–º—Å–∫–∏–π –∫–ª–∏–Ω–æ–∫ –ø–æ–º–æ–∂–µ—Ç —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å —Å–∫—Ä—ã—Ç–æ–≥–æ –¥–µ–º–æ–Ω–∞.",
    "–ó–∞–ø—Ä–µ—Ç–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–∫—É—à–∞—Ç—å —Ç–µ–±—è –≤–µ–ª–∏–∫–æ–π —Å–∏–ª–æ–π.",
    "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ë–ª–∞–≥–æ–≥–æ –î–≤–æ—Ä–∞ –ø—Ä–∏–±—É–¥–µ—Ç —Å –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.",
    "–ü—Ä–∏–∑—Ä–∞–∫ –ø—Ä–æ—à–ª–æ–≥–æ –°—É–º–µ—Ä–µ—á–Ω–æ–≥–æ –æ—Ö–æ—Ç–Ω–∏–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –º—É–¥—Ä–æ—Å—Ç—å.",
    "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —É—Å–∏–ª–∏—Ç —Ç–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.",
    "–¢–≤–æ—è –ª–æ—è–ª—å–Ω–æ—Å—Ç—å –ö–æ–Ω–∫–ª–∞–≤—É –±—É–¥–µ—Ç –∏—Å–ø—ã—Ç–∞–Ω–∞.",
    "–ü—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ –∏–∑ –ú–æ–ª—á–∞–ª–∏–≤–æ–≥–æ –ì–æ—Ä–æ–¥–∞ –≤—ã–π–¥–µ—Ç –Ω–∞ —Å–≤–µ—Ç.",
    "–†–µ–¥–∫–∏–π –¥–µ–º–æ–Ω –ø–æ—Ç—Ä–µ–±—É–µ—Ç —Ç–≤–æ–µ–≥–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è.",
    "–°—Ç–∞—Ä—ã–π –¥—Ä—É–≥ –≤–µ—Ä–Ω–µ—Ç—Å—è —Å —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏.",
    "–í–∏–¥–µ–Ω–∏–µ –æ—Ç –∞–Ω–≥–µ–ª–∞ –†–∞–∑–∏—ç–ª—è –Ω–∞–ø—Ä–∞–≤–∏—Ç —Ç–≤–æ–π –ø—É—Ç—å.",
    "–°–∏–ª–∞ –°–º–µ—Ä—Ç–Ω–æ–π –ß–∞—à–∏ –±—É–¥–µ—Ç –æ—â—É—â–∞—Ç—å—Å—è –æ—Å–æ–±–µ–Ω–Ω–æ —Å–∏–ª—å–Ω–æ —Å–µ–≥–æ–¥–Ω—è.",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –ì–æ—Ä–æ–¥ –ö–æ—Å—Ç–µ–π —Ä–∞—Å–∫—Ä–æ–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ –∑–Ω–∞–Ω–∏—è.",
    "–ó–≤—É–∫ —Ä–æ–≥–∞ –°—É–º–µ—Ä–µ—á–Ω—ã—Ö –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ.",
    "–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä—É–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ç–≤–æ–∏—Ö —Å–Ω–∞—Ö.",
    "–ü–æ—Å–µ—â–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ò–Ω—Å—Ç–∏—Ç—É—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–∏—Ç –≤–∞–∂–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É.",
    "–¢–≤–æ—è —Å–≤—è–∑—å —Å –ø–∞—Ä–∞–±–∞—Ç–∞–π –æ–±–µ—Å–ø–µ—á–∏—Ç —Å–∏–ª—É –∏ —è—Å–Ω–æ—Å—Ç—å."
]

# Define the image file path (update with your image file path)
image_path = './reading.png'

# Function to handle reading request
async def reading_command(update: Update, context):
    user_id = update.message.from_user.id
    user_mention = update.message.from_user.username or update.message.from_user.first_name
    mention_text = f"@{user_mention}" if update.message.from_user.username else user_mention

    if can_request_reading(user_id):
        if reduce_balance(user_id, 50) is not None:
            await update.message.reply_text("–ö–∞–º–Ω–∏ –¥—É—à —Å –ª—ë–≥–∫–∏–º —Ç—Ä–µ—Å–∫–æ–º –æ—Å—ã–ø–∞–ª–∏—Å—å –Ω–∞ —Å—Ç–æ–ª. –ú–∞–≥–Ω—É—Å –≤—Å–∫–∏–Ω—É–ª –Ω–∞ –Ω–∏—Ö —Å–≤–æ–π –≤–∑–æ—Ä, —É–ª—ã–±–Ω—É–ª—Å—è –∏ –ø–æ–ª–æ–∂–∏–ª —Ä—É–∫—É –Ω–∞ —Ö—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π —à–∞—Ä...")
            await asyncio.sleep(2)
            reading = random.choice(readings)
            with open(image_path, 'rb') as image:
                await update.message.reply_photo(photo=InputFile(image), caption=f"üíé {mention_text}, –≤–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{reading}")
        else:
            await update.message.reply_text(f"üíé {mention_text}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–º–Ω–µ–π –¥—É—à –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞.")
    else:
        await update.message.reply_text(f"üíé {mention_text}, –≤—ã —É–∂–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –¥–æ –∑–∞–≤—Ç—Ä–∞.")

app = ApplicationBuilder().token("7175746196:AAHckVjmat7IBpqvzWfTxvUzvQR1_1FgLiw").build()
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
app.add_handler(CommandHandler("balance", balance_command))
app.add_handler(CommandHandler("reading", reading_command))
app.run_polling()

#Test bot API token: 7374196189:AAH5nebr7bg8fVHCSm5uSGhT646sNZJ6nfEa